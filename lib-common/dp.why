(* Common definition for DP algorithms *)
theory DP

  use bool.Bool
  use real.RealInfix
  use real.Abs as RAbs

  use list.List

  (************************************************************************)
  (* Distance over reals *)

  function d_r (x1 x2 : real) : real = RAbs.abs (x1 -. x2)

  (* This helps *)
  lemma d_r_pos : forall x1 x2 : real.
        0.0 <=. d_r x1 x2

  (************************************************************************)
  (* Distance over bool  *)
  function d_b (x1 x2 : bool) : real = if x1 = x2 then 0.0 else 1.0

  (************************************************************************)
  (* Distance over list of reals *)

  function d_lr (l1 l2 : list real) : real  = match l1,l2 with
    | Nil, Nil             -> 0.0
    | Cons x xs, Cons y ys -> d_r x y +. d_lr xs ys
    | _                    -> 0.0
  end

  (*  *)
  lemma d_lr_pos     : forall l1 l2 : list real.
        0.0 <=. d_lr l1 l2

  lemma d_lr_cons     : forall x1 x2 : real, l1 l2 : list real.
        d_lr l1 l1 <=. d_lr (Cons x1 l1) (Cons x2 l2)

  lemma eq_dist       : forall l1 l2 : list real.
	l1 = l2 ->
        d_lr l1 l2 = 0.0

  lemma d_lr_head_tail : forall x1 x2 : real, xs1 xs2 : list real.
        d_r x1 x2 +. d_lr xs1 xs2 = d_lr (Cons x1 xs1) (Cons x2 xs2)

  (* Not very smart solvers *)
  lemma d_lr_head_tail' : forall x1 x2 : real, xs1 xs2 l1 l2 : list real.
        l1 = Cons x1 xs1 ->
        l2 = Cons x2 xs2 ->
        d_r x1 x2 +. d_lr xs1 xs2 = d_lr l1 l2

  (************************************************************************)
  (* Distance over list of bools *)
  function d_lb (l1 l2 : list bool) : real  = match l1,l2 with
    | Nil, Nil             -> 0.0
    | Cons x xs, Cons y ys -> d_b x y +. d_lb xs ys
    | _                    -> 0.0
  end

  (*  *)
  lemma d_lb_pos     : forall l1 l2 : list bool.
        0.0 <=. d_lb l1 l2

  lemma d_lb_cons     : forall x1 x2 : bool, l1 l2 : list bool.
        d_lb l1 l1 <=. d_lb (Cons x1 l1) (Cons x2 l2)

  lemma eq_dist_b     : forall l1 l2 : list bool.
	l1 = l2 ->
        d_lb l1 l2 = 0.0

  lemma d_lb_head_tail : forall x1 x2 : bool, xs1 xs2 : list bool.
        d_b x1 x2 +. d_lb xs1 xs2 = d_lb (Cons x1 xs1) (Cons x2 xs2)

  (* Not very smart solvers *)
  lemma d_lb_head_tail' : forall x1 x2 : bool, xs1 xs2 l1 l2 : list bool.
        l1 = Cons x1 xs1 ->
        l2 = Cons x2 xs2 ->
        d_b x1 x2 +. d_lb xs1 xs2 = d_lb l1 l2


  (************************************************************************)
  (* Adjacency predicate for lists                                        *)
  (*                                                                      *)
  (* In order to spare the solvers to deal with a predicate parametric    *)
  (* on a particular distance, we define a different predicate for each   *)
  (* type.                                                                *)
  (*                                                                      *)
  (* FIXME: Use cloning of theories.                                      *)
  (************************************************************************)

  (************************************************************************)
  (* List of reals                                                        *)
  (************************************************************************)

  predicate adjacent (l1 l2 : list real) = match l1,l2 with
    | Nil, Nil -> true
    | Cons x1 l1, Cons x2 l2 -> (RAbs.abs (x1 -. x2) <=. 1.0 /\ l1 = l2) \/
                                (x1 = x2 /\ adjacent l1 l2)
    | _ -> false
  end

  (* From eq_adjacent we can auto-prove adjacent_impl.
     eq_adjacent needs induction on both lists
  *)

  lemma eq_adjacent   : forall l1 l2 : list real.
        l1 = l2 -> adjacent l1 l2

  lemma adjacent_impl : forall x1 x2 : real, l1 l2 : list real.
        adjacent (Cons x1 l1) (Cons x2 l2) -> adjacent l1 l2

  lemma adjacent_bound_head : forall x1 x2 : real, l1 l2 : list real.
        adjacent (Cons x1 l1) (Cons x2 l2) -> d_r x1 x2 <=. 1.0

  lemma adjacent_bound_tail : forall x1 x2 : real, l1 l2 : list real.
        adjacent (Cons x1 l1) (Cons x2 l2) -> d_lr l1 l2 <=. 1.0

  lemma adjacent_bound      : forall l1 l2 : list real.
        adjacent l1 l2 -> d_lr l1 l2 <=. 1.0

  (* Lemma about adjacency and distance: if we have a bound on
     distance of the tail, the distance of the head plus the bound is
     less than the total distance. *)

  lemma adjacent_cons_bound : forall x1 x2 y1 y2 : real, xs1 xs2 l1 l2 : list real.
        adjacent l1 l2             ->
        l1 = Cons x1 xs1           ->
        l2 = Cons x2 xs2           ->
        d_r y1 y2 <=. d_lr xs1 xs2 ->
        d_r (x1 +. y1) (x2 +. y2) <=. d_lr l1 l2

  (************************************************************************)
  (* List of bools                                                        *)
  (************************************************************************)

  predicate adjacent_b (l1 l2 : list bool) = match l1, l2 with
    | Nil, Nil -> true
    | Cons x1 l1, Cons x2 l2 -> (x1 <> x2 /\ l1 = l2) \/
                                (x1 = x2  /\ adjacent_b l1 l2)
    | _ -> false
  end

  lemma eq_adjacent_b : forall l1 l2 : list bool.
        l1 = l2 -> adjacent_b l1 l2

  lemma adjacent_b_impl : forall x1 x2 : bool, l1 l2 : list bool.
        adjacent_b (Cons x1 l1) (Cons x2 l2) -> adjacent_b l1 l2

  lemma adjacent_b_bound_head : forall x1 x2 : bool, l1 l2 : list bool.
        adjacent_b (Cons x1 l1) (Cons x2 l2) -> d_b x1 x2 <=. 1.0

  lemma adjacent_b_bound_tail : forall x1 x2 : bool, l1 l2 : list bool.
        adjacent_b (Cons x1 l1) (Cons x2 l2) -> d_lb l1 l2 <=. 1.0

  lemma adjacent_b_bound  : forall l1 l2 : list bool.
        adjacent_b l1 l2 -> d_lb l1 l2 <=. 1.0

(*
  EG: No boolean version necessary for now.

  lemma adjacent_b_cons_bound : forall x1 x2 y1 y2 : bool, xs1 xs2 l1 l2 : list bool.
        adjacent_b l1 l2             ->
        l1 = Cons x1 xs1           ->
        l2 = Cons x2 xs2           ->
        d_b y1 y2 <=. d_lb xs1 xs2 ->
        d_b (x1 +. y1) (x2 +. y2) <=. d_lb l1 l2
*)

  (************************************************************************)
  (* Skeleton predicates for datatypes                                    *)

  predicate list_skeleton (l1 l2 : list 'a) = match l1,l2 with
    | Nil, Nil -> true
    | Cons _ l1, Cons _ l2 -> list_skeleton l1 l2
    | _        -> false
  end

  lemma adj_sk   : forall l1 l2 : list real. adjacent l1 l2   -> list_skeleton l1 l2

  lemma adj_b_sk : forall l1 l2 : list bool. adjacent_b l1 l2 -> list_skeleton l1 l2

  lemma eq_sk  : forall l1 l2 : list 'a. l1 = l2 ->
                 list_skeleton l1 l2

end
